// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/queue.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiniQClient is the client API for MiniQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiniQClient interface {
	GetTasks(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (MiniQ_GetTasksClient, error)
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type miniQClient struct {
	cc grpc.ClientConnInterface
}

func NewMiniQClient(cc grpc.ClientConnInterface) MiniQClient {
	return &miniQClient{cc}
}

func (c *miniQClient) GetTasks(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (MiniQ_GetTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &MiniQ_ServiceDesc.Streams[0], "/miniq.MiniQ/GetTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &miniQGetTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MiniQ_GetTasksClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type miniQGetTasksClient struct {
	grpc.ClientStream
}

func (x *miniQGetTasksClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *miniQClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/miniq.MiniQ/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniQClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/miniq.MiniQ/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiniQServer is the server API for MiniQ service.
// All implementations must embed UnimplementedMiniQServer
// for forward compatibility
type MiniQServer interface {
	GetTasks(*GetTaskRequest, MiniQ_GetTasksServer) error
	AddTask(context.Context, *AddTaskRequest) (*emptypb.Empty, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMiniQServer()
}

// UnimplementedMiniQServer must be embedded to have forward compatible implementations.
type UnimplementedMiniQServer struct {
}

func (UnimplementedMiniQServer) GetTasks(*GetTaskRequest, MiniQ_GetTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedMiniQServer) AddTask(context.Context, *AddTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedMiniQServer) UpdateTask(context.Context, *UpdateTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedMiniQServer) mustEmbedUnimplementedMiniQServer() {}

// UnsafeMiniQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiniQServer will
// result in compilation errors.
type UnsafeMiniQServer interface {
	mustEmbedUnimplementedMiniQServer()
}

func RegisterMiniQServer(s grpc.ServiceRegistrar, srv MiniQServer) {
	s.RegisterService(&MiniQ_ServiceDesc, srv)
}

func _MiniQ_GetTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MiniQServer).GetTasks(m, &miniQGetTasksServer{stream})
}

type MiniQ_GetTasksServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type miniQGetTasksServer struct {
	grpc.ServerStream
}

func (x *miniQGetTasksServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func _MiniQ_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniQServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miniq.MiniQ/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniQServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniQ_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniQServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miniq.MiniQ/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniQServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MiniQ_ServiceDesc is the grpc.ServiceDesc for MiniQ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiniQ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "miniq.MiniQ",
	HandlerType: (*MiniQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _MiniQ_AddTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _MiniQ_UpdateTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTasks",
			Handler:       _MiniQ_GetTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/queue.proto",
}
